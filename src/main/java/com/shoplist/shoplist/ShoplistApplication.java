package com.shoplist.shoplist;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ShoplistApplication {

	public static void main(String[] args) {
		SpringApplication.run(ShoplistApplication.class, args);
	}

}
//> Ваше задание на сегодня — нужно написать сервис, который собирает корзину для интернет-магазина.
//
//Выполненное задание пришлите на платформу в виде ссылки на пул-реквест проекта на GitHub.
//>
//
//Алгоритм действий:
//
//- Разработайте контроллер, сервис и некую сущность корзины с покупками.
//- У контроллера должны быть два метода:
///store/order/add
///store/order/get
//- При обращении к методу add можно в качестве параметров запроса передавать один или
// несколько чисел, которые являются ID некоего товара.
//- При get мы должны получить все добавленные ID в виде списка в JSON-формате.
//- Для каждого подключения нового клиента должен создаваться новый объект — корзина.
//- Никаких хранилищ всех корзин быть не должно.
//- В качестве теста можно зайти со своего браузера и добавить итемы (item), далее —  получить список.
//- Этот же тест нужно проделать через браузер в режиме инкогнито и получить другой список.
//Алгоритм действий теста в браузере в режиме инкогнито:
//    1. Обращаемся к методу add из браузера, добавляем первые ID.
//    2. Обращаемся к методу add из инкогнито, добавляем первые ID.
//    3. Повторяем шаг 1 и 2.
//    4. Обращаемся к методу get сначала из браузера, потом из инкогнито. Списки должны
//    быть разными и заполнены тем, что было в шагах 1–3 .
//    - **Подсказки**
//        1. Нужно выбрать корректный скоуп для корзины.
//        2. Нужно указать context-path /store в application.properties.
//        3. Метод add должен быть один и при этом корректно работать как с одним ID, так и с несколькими.
//        4. Учесть, что ID могут повторяться. Выбрать соответствующую коллекцию в корзине.